/*
* File name: binary search tree (with several conditions)
* author: ye-Kim (yekim.galanthus@gmail.com)
* last updated: 2021. 04. 01.
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define RMAX 100
//#define _DEBUG_

typedef struct node {
	int data;
	struct node* left, * right;
	int ht;
} node;

node* insert(node*, int);
void inorder(node*);
int search(node*, int);
int height(node*);
node* rotateright(node*);
node* rotateleft(node*);
node* RR(node*);
node* LL(node*);
node* LR(node*);
node* RL(node*);
int BF(node*);
void findMax(node*);
int inorder_srchMax(node*, int);
void findNums(node*);
void inorder_find15down(node*);
void inorder_find50up(node*);
void inorder_find15up50down(node*);

int main() {
	node* root = NULL;
	int x, n, i;
	int tree_cnt = 0;
	int num;
	int random_no[200];

	srand(time(NULL));

	for (i = 0; i < 198; i++) {
		random_no[i] = 1 + (int)rand() % RMAX;
	}
	random_no[i++] = 15;
	random_no[i++] = 50;
	
	root = insert(root, random_no[198]);
	root = insert(root, random_no[199]);

	while (tree_cnt < 50) {
		num = 1 + (int)rand() % 199;
#ifdef _DEBUG_
		printf("cnt %d, %d: %d\n", tree_cnt, num, random_no[num]);
#endif

		if (search(root, random_no[num]) == 1) {
			num = 1 + (int)rand() % 199;
		}
		else {
			root = insert(root, random_no[num]);
			tree_cnt++;
		}
	}

	printf("\n===Print The AVL Tree===\n");
	inorder(root);
	printf("===Print Complete===\n\n");

	findMax(root);
	findNums(root);

	printf("\n===Search the keys < 15===\n");
	inorder_find15down(root);
	printf("===Search Complete===\n\n");

	printf("\n===Search the keys > 50===\n");
	inorder_find50up(root);
	printf("===Search Complete===\n\n");

	printf("\n===Search the keys up to 15 and down to 50===\n");
	inorder_find15up50down(root);
	printf("===Search Complete===\n\n");


#ifdef _DEBUG_
	printf("the root: %d", root->data);
#endif

	return(0);
}

void findNums(node* T) {
	int search_key[5] = { 15,20,50,70,90 };
	int i;

	printf("\n===Searching START===\n");
	for (i = 0; i < 5; i++) {
		if (search(T, search_key[i]) == 1) {
			printf("Search success: %d\n", search_key[i]);
		}
		else {
			printf("Search Fail: %d\n", search_key[i]);
		}
	}
	printf("===Searching COMPLETE===\n\n");
}

node* insert(node* T, int x) {
	if (T == NULL) 	{
		T = (node*)malloc(sizeof(node));
		T->data = x;
		T->left = NULL;
		T->right = NULL;
	}
	else
		if (x > T->data) {		// insert in right subtree
			T->right = insert(T->right, x);
			if (BF(T) == -2)
				if (x > T->right->data)
					T = RR(T);
				else
					T = RL(T);
		}
		else
			if (x < T->data) {
				T->left = insert(T->left, x);
				if (BF(T) == 2)
					if (x < T->left->data)
						T = LL(T);
					else
						T = LR(T);
			}

	T->ht = height(T);

	return(T);
}

void inorder_find15down(node* T) {
	if (T != NULL) {
		inorder_find15down(T->left);
		if (T->data < 15) {
			printf("success: %d\n", T->data);
		}
		inorder_find15down(T->right);
	}
}

void inorder_find50up(node* T) {
	if (T != NULL) {
		inorder_find50up(T->left);
		if (T->data > 50) {
			printf("success: %d\n", T->data);
		}
		inorder_find50up(T->right);
	}
}

void inorder_find15up50down(node* T) {
	if (T != NULL) {
		inorder_find15up50down(T->left);
		if (T->data > 15 && T->data < 50) {
			printf("success: %d\n", T->data);
		}
		inorder_find15up50down(T->right);
	}
}

int search(node* T, int srch) {
	if (T != NULL) {
		if (T->data == srch) {

#ifdef _DEBUG_
			printf("Searching success\n");
#endif
			return(1);
		}
		else if (T->data < srch) {
			search(T->left, srch);
			search(T->right, srch);
		}
		else if (T->data > srch) {
			search(T->right, srch);
			search(T->left, srch);
		}
	}
	else {
		return(0);
	}
}

int height(node* T) {
	int lh, rh;
	if (T == NULL)
		return(0);

	if (T->left == NULL)
		lh = 0;
	else
		lh = 1 + T->left->ht;

	if (T->right == NULL)
		rh = 0;
	else
		rh = 1 + T->right->ht;

	if (lh > rh)
		return(lh);

	return(rh);
}

node* rotateright(node* x) {
	node* y;
	y = x->left;
	x->left = y->right;
	y->right = x;
	x->ht = height(x);
	y->ht = height(y);
	return(y);
}

node* rotateleft(node* x) {
	node* y;
	y = x->right;
	x->right = y->left;
	y->left = x;
	x->ht = height(x);
	y->ht = height(y);

	return(y);
}

node* RR(node* T) {
	T = rotateleft(T);
	return(T);
}

node* LL(node* T) {
	T = rotateright(T);
	return(T);
}

node* LR(node* T) {
	T->left = rotateleft(T->left);
	T = rotateright(T);

	return(T);
}

node* RL(node* T) {
	T->right = rotateright(T->right);
	T = rotateleft(T);
	return(T);
}

int BF(node* T) {
	int lh, rh;
	if (T == NULL)
		return(0);

	if (T->left == NULL)
		lh = 0;
	else
		lh = 1 + T->left->ht;

	if (T->right == NULL)
		rh = 0;
	else
		rh = 1 + T->right->ht;

	return(lh - rh);
}

void inorder(node* T) {
	if (T != NULL) 	{
		inorder(T->left);
		printf("%d(Bf=%d)\n", T->data, BF(T));
		inorder(T->right);
	}
}

int inorder_srchMax(node* T, int n) {
	if (T != NULL) {
		inorder_srchMax(T->left, n);
		n = T->data;
		inorder_srchMax(T->right, n);
	}
	else {
		return(n);
	}
}

void findMax(node* T) {
	int maxkey = 0;

	printf("\n===Search the max node===\n");

	maxkey = inorder_srchMax(T, maxkey);

	printf("The max key is %d", maxkey);
	printf("\n===Search Complete===\n\n");
}
